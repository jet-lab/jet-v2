#!/bin/bash
# CI validation script.
# 
# Run a single job from the CI workflow:
#   ./check <job-name>
#           (wrap the job name in quotes if it has spaces)
# Run the entire workflow:
#   ./check all
# Run jobs in the container used for CI:
#   ./check in-docker '<job-name or all>'
#
# This script can also be sourced:
#   . check
# Then you can run any of the subcommands without calling ./check:
#   anchor-test    # tab completion is available

DOCKER_IMAGE=jetprotocol/builder:solana-1.10.35-anchor-0.25.0-3

#################
# Workflow Jobs

anchor-test() { args=$@
    extract-arg --skip-yarn || yarn-build
	anchor test $args -- --features testing
}

hosted-tests-localnet() { args=$@
    extract-arg --skip-build || tests/scripts/on_localnet.sh anchor-build
    SOLANA_LOGS=${SOLANA_LOGS:-true} tests/scripts/on_localnet.sh test combined $args
}

cargo-lint() {
    cargo fmt --all --check
    cargo clippy --all-targets -- -Dwarnings
}

cargo-test() {
    if [[ ${CODECOV:-false} == true ]]; then
        cargo llvm-cov --workspace --lcov --output-path lcov.info --ignore-filename-regex programs/mock-pyth/src/lib.rs
    else 
        cargo test
    fi
}

#################
# helper functions

yarn-build() {
    yarn install --frozen-lockfile
    yarn build:libs
}

# runs every workflow job. default if no args are given
all() {
    cargo-lint
    cargo-test
    hosted-tests-localnet
    anchor-test --skip-build
}

# runs whatever command follows in a docker container
in-docker() {
    docker run \
        -v "$(dirname $(realpath ${BASH_SOURCE[0]})):/jet-v2" \
        --workdir /jet-v2 \
        $DOCKER_IMAGE \
        /jet-v2/check $@
}

# assumes "args" variable is set.
# returns whether args contains the passed in string as an independent argument
# removes the string from args
extract-arg() {
    [[ "$args" == "$1" ]] && args='' || \
    [[ "$args" == "$1 "* ]] && args="$(sed "s/$1 //g" <<< "$args")" || \
    [[ "$args" == *" $1" ]] && args="$(sed "s/ $1//g" <<< "$args")" || \
    [[ "$args" == *" $1 "* ]] && args="$(sed "s/ $1//g" <<< "$args")" || \
        return 1
}

#################
# run

if (return 0 2>/dev/null); then
    echo sourced
else
    set -euxo pipefail
    if [[ "$@" == '' ]]; then
        all
    else
        $@
    fi
    set +x
    echo -e '\n\n âœ” all good'
fi
