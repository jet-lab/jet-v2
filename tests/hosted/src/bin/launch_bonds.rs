use std::sync::Arc;

use anyhow::Result;
use hosted_tests::{bonds::TestManager, margin::MarginClient};
use jet_simulation::solana_rpc_api::RpcConnection;

#[tokio::main(flavor = "multi_thread")]
async fn main() -> Result<()> {
    let rpc = Arc::new(RpcConnection::new_local_funded()?);

    let margin = MarginClient::new(rpc.clone());
    margin.create_authority_if_missing().await?;
    margin
        .register_adapter_if_unregistered(&jet_bonds::ID)
        .await?;

    let x = TestManager::new(rpc, &keys::mint())
        .await?
        .with_bonds(&keys::event_queue(), &keys::bids(), &keys::asks())
        .await?;
    println!("deployed bond manager to {:?}", x.ix_builder.manager());

    Ok(())
}

mod keys {
    json_keypairs! {
        // payer = "[222,147,115,219,200,207,183,34,103,192,44,23,43,203,127,70,67,170,118,146,40,128,166,176,91,184,240,89,157,92,138,41,12,48,55,127,230,6,125,75,21,171,39,213,6,155,83,215,2,250,164,163,97,165,211,0,204,244,39,28,66,112,134,180]";
        // authority = "[39,147,77,63,116,164,246,7,32,209,175,208,128,14,177,244,45,71,65,156,25,123,37,149,13,154,122,109,65,99,210,163,119,197,146,64,183,117,85,212,178,252,172,16,127,0,85,40,51,163,146,80,31,186,233,84,244,109,213,213,255,149,121,207]";
        // crank = "[78,122,206,47,0,102,125,42,154,126,250,137,110,198,174,2,137,75,111,54,34,93,221,115,77,222,133,247,129,233,156,0,50,26,219,183,209,148,208,168,131,217,2,159,31,202,77,155,22,129,62,12,119,47,130,91,28,192,91,204,32,21,101,165]";
        mint = "[250,147,202,203,141,69,148,144,94,77,227,139,131,238,119,177,155,59,20,90,232,125,84,36,38,159,178,180,109,242,88,156,151,27,163,56,120,190,145,77,103,139,67,48,60,172,93,127,35,86,111,179,36,15,254,100,98,127,5,36,144,37,67,23]";
        event_queue = "[17,178,10,115,120,189,199,226,30,15,225,157,153,108,142,238,82,232,15,41,9,119,235,92,230,149,252,151,251,85,131,100,163,103,168,51,55,212,247,70,167,179,79,144,86,148,191,231,11,240,130,202,3,103,140,88,228,106,241,163,98,186,133,74]";
        asks = "[180,100,93,218,69,198,217,206,12,228,118,151,236,0,24,149,56,130,98,118,72,244,162,132,48,22,138,163,214,53,15,39,5,180,8,81,202,31,5,125,215,251,232,36,95,225,56,25,188,133,170,50,162,43,19,48,23,11,192,101,37,127,232,105]";
        bids = "[48,221,229,8,201,54,217,152,135,227,0,97,39,63,142,189,225,213,14,30,183,186,83,136,142,103,192,238,123,130,32,76,16,69,198,90,48,147,197,19,238,252,56,224,52,170,40,67,205,131,196,191,96,235,151,183,206,42,84,110,70,66,66,97]";
    }

    macro_rules! json_keypairs {
        ($($name:ident = $json:literal;)+) => {
            $(pub fn $name() -> solana_sdk::signature::Keypair {
                key_strings::get(key_strings::$name)
            })+
            mod key_strings {
                $(#[allow(non_upper_case_globals)] pub const $name: &str = $json;)+
                pub fn get(s: &str) -> solana_sdk::signature::Keypair {
                    solana_sdk::signature::read_keypair(&mut s.as_bytes().clone()).unwrap()
                }
            }
        };
    }
    use json_keypairs;
}
