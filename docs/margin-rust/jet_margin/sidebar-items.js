window.SIDEBAR_ITEMS = {"constant":[["LIQUIDATION_CLOSE_THRESHOLD_USD","The threshold at which accounts can have all their debts closed. Accounts with total exposure below this value can have their exposure reduced to zero."],["LIQUIDATION_MAX_COLLATERAL_RATIO","The maximum c-ratio that an account can end a liquidation with."],["LIQUIDATION_MAX_EQUITY_LOSS_BPS","The maximum amount of equity that can be deducted from an account during liquidation as a fraction of the total dollar value that is expected to need to be liquidated"],["LIQUIDATION_TIMEOUT","The maximum duration in seconds of a liquidation before another user may cancel it"],["MARGIN_ACCOUNT_VERSION","The current version for the margin account state"],["MAX_ORACLE_CONFIDENCE","The maximum confidence deviation allowed for an oracle price."],["MAX_ORACLE_STALENESS","The maximum number of seconds since the last price was by an oracle, before rejecting the price as too stale."],["MAX_PRICE_QUOTE_AGE","The maximum age to allow for a quoted price for a position (seconds)"],["MAX_USER_POSITIONS","The maximum number of positions that a user can register. This may be exceeded by a liquidator."]],"enum":[["Approver",""],["ErrorCode",""],["PositionChange",""],["PositionKind",""]],"fn":[["check_id","Confirms that a given pubkey is equivalent to the program ID"],["entry","The Anchor codegen exposes a programming model where a user defines a set of methods inside of a `#[program]` module in a way similar to writing RPC request handlers. The macro then generates a bunch of code wrapping these user defined methods into something that can be executed on Solana."],["id","Returns the program ID"],["write_adapter_result","Writes the result of position changes from an adapter invocation."]],"mod":[["accounts","An Anchor generated module, providing a set of structs mirroring the structs deriving `Accounts`, where each field is a `Pubkey`. This is useful for specifying accounts for a client."],["cpi",""],["events",""],["instruction","An Anchor generated module containing the programâ€™s set of instructions, where each method handler in the `#[program]` mod is associated with a struct defining the input arguments to the method. These should be used directly, when one wants to serialize Anchor instruction data, for example, when speciying instructions on a client."],["jet_margin","This crate documents the instructions used in the `margin` program of the jet-v2 repo. Handler functions are described for each instruction well as struct parameters (and their types and descriptions are listed) and any handler function parameters aside from parameters that exist in every instruction handler function. Parameters of events emitted for the purposes of data logging are also included."],["program","Module representing the program."]],"static":[["ID","The static program ID"]],"struct":[["AccountPosition",""],["AccountPositionKey",""],["AccountPositionList",""],["AdapterPositionFlags",""],["AdapterResult",""],["Invocation","Data made available to invoked programs by the margin program. Put data here if:"],["Liquidation","State of an in-progress liquidation"],["MarginAccount",""],["PriceChangeInfo",""],["PriceInfo",""],["Valuation",""]],"trait":[["AnchorVerify","Execute all the mandatory anchor account verifications that are used during deserialization"],["SignerSeeds",""]]};